# This workflow will build, sign, and package a WinUI 3 MSIX desktop application
# built on .NET.

name: Build MSIX sideload package

on: [push, pull_request, workflow_dispatch]

jobs:
  create-draft-release:
    runs-on: ubuntu-latest

    outputs:
      release_upload_url: ${{ steps.create-draft-release.outputs.upload_url }}

    steps:
    - name: Create draft release
      id: create-draft-release
      uses: ncipollo/release-action@v1
      if: github.ref_type == 'tag' && startsWith(github.ref_name, 'v')
      with:
        draft: true
        generateReleaseNotes: true

  build:
    needs: create-draft-release

    strategy:
      matrix:
        configuration: [Release]
        platform: [x64, arm64]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: EnergyStarX  # Replace with your solution name, i.e. App1.sln.
      Cert_File_Name: GitHubActionsWorkflow.pfx

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.1

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

    # Decode the base 64 encoded pfx and save the Signing_Certificate
    - name: Decode the pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.BASE64_ENCODED_PFX }}")
        $certificatePath = $env:Cert_File_Name
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    # Replace secrets in code
    - name: Replace secrets in code
      run: |
        function Replace-StringInFile {
            param ($filePath, $oldString, $newString)

            $file = Get-ChildItem $filePath
            $fileContent = Get-Content $file
            $matchCount = ($fileContent | Select-String -Pattern $oldString -AllMatches).Matches.Count
            $fileContent = $fileContent.Replace($oldString, $newString)
            $fileContent > $file

            Write-Host "Replaced `"$oldString`" in `"$filePath`" for $matchCount times"
        }

        Replace-StringInFile ".\EnergyStarX\Constants\Secrets.cs" "{{AppCenterSecret}}" "${{ secrets.APP_CENTER_SECRET }}"

    # Create the app package by building and packaging the project
    - name: Create the app package
      run: |
        $certificateAbsolutePath = (Get-Item $env:Cert_File_Name).FullName
        msbuild $env:Solution_Name `
          /p:Configuration=$env:Configuration `
          /p:Platform=$env:Platform `
          /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode `
          /p:AppxBundle=$env:Appx_Bundle `
          /p:AppxPackageSigningEnabled=True `
          /p:PackageCertificateKeyFile="$certificateAbsolutePath" `
          /p:AppxPackageSigningTimestampDigestAlgorithm=SHA256 `
          /p:AppxPackageDir="$env:Appx_Package_Dir" `
          /p:GenerateAppxPackageOnBuild=true `
          /p:WindowsAppSDKSelfContained=true `
          /p:SelfContained=true `
          /p:PublishReadyToRun=false `
          /p:RuntimeIdentifier=win10-${{ matrix.platform }}
      env:
        Appx_Bundle: Never
        Appx_Package_Build_Mode: SideloadOnly
        Appx_Package_Dir: Packages\${{ matrix.platform }}\
        Configuration: ${{ matrix.configuration }}
        Platform: ${{ matrix.platform }}

    # Remove the pfx
    - name: Remove the pfx
      run: Remove-Item -path $env:Cert_File_Name

    # Get artifact name
    - name: Get artifact name
      run: |
        $folderName = (Get-ChildItem "${{ env.Solution_Name }}\\Packages\${{ matrix.platform }}")[0].Name
        $shortHash = $env:GITHUB_SHA.Substring(0, 7)
        $artifactName = "$folderName-$shortHash"
        "Artifact_Name=$artifactName" >> $env:GITHUB_ENV

    # Upload the MSIX package: https://github.com/marketplace/actions/upload-a-build-artifact
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name:  ${{ env.Artifact_Name }}
        path: ${{ env.Solution_Name }}\\Packages\${{ matrix.platform }}

    - name: Zip artifact for release
      if: github.ref_type == 'tag' && startsWith(github.ref_name, 'v')
      run: |
        mkdir ~\release
        Compress-Archive -Path "${{ env.Solution_Name }}\\Packages\${{ matrix.platform }}\*" -DestinationPath "~\release\${{ env.Artifact_Name }}.zip"

    - name: Upload artifact to release
      uses: shogo82148/actions-upload-release-asset@v1
      if: github.ref_type == 'tag' && startsWith(github.ref_name, 'v')
      with:
        upload_url: ${{ needs.create-draft-release.outputs.release_upload_url }}
        asset_path: ~\release\${{ env.Artifact_Name }}.zip