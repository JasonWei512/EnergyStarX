// This file is generated by a T4 template. Do not edit manually.

// Note:
// Some types can be directly stored in "ApplicationData.Current.LocalSettings": 
// https://docs.microsoft.com/windows/apps/design/app-settings/store-and-retrieve-app-data#settings
// Unfortunately there's no way to constraint a generic type "T" to "T1 or T2" in C#, so I have to use a T4 template to generate these methods.

using Windows.Foundation.Collections;
using Windows.Storage;

namespace EnergyStarX.Helpers;

public static class SettingsHelper
{
    private static IPropertySet LocalSettings => ApplicationData.Current.LocalSettings.Values;

    public static int GetSetting(string settingKey, int defaultValue)
    {
        if (LocalSettings.TryGetValue(settingKey, out object? obj))
        {
            if (obj is int value)
            {
                return value;
            }
        }
        return defaultValue;
    }

    public static void SetSetting(string settingKey, int value)
    {
        LocalSettings[settingKey] = value;
    }

    public static long GetSetting(string settingKey, long defaultValue)
    {
        if (LocalSettings.TryGetValue(settingKey, out object? obj))
        {
            if (obj is long value)
            {
                return value;
            }
        }
        return defaultValue;
    }

    public static void SetSetting(string settingKey, long value)
    {
        LocalSettings[settingKey] = value;
    }

    public static float GetSetting(string settingKey, float defaultValue)
    {
        if (LocalSettings.TryGetValue(settingKey, out object? obj))
        {
            if (obj is float value)
            {
                return value;
            }
        }
        return defaultValue;
    }

    public static void SetSetting(string settingKey, float value)
    {
        LocalSettings[settingKey] = value;
    }

    public static double GetSetting(string settingKey, double defaultValue)
    {
        if (LocalSettings.TryGetValue(settingKey, out object? obj))
        {
            if (obj is double value)
            {
                return value;
            }
        }
        return defaultValue;
    }

    public static void SetSetting(string settingKey, double value)
    {
        LocalSettings[settingKey] = value;
    }

    public static bool GetSetting(string settingKey, bool defaultValue)
    {
        if (LocalSettings.TryGetValue(settingKey, out object? obj))
        {
            if (obj is bool value)
            {
                return value;
            }
        }
        return defaultValue;
    }

    public static void SetSetting(string settingKey, bool value)
    {
        LocalSettings[settingKey] = value;
    }

    public static char GetSetting(string settingKey, char defaultValue)
    {
        if (LocalSettings.TryGetValue(settingKey, out object? obj))
        {
            if (obj is char value)
            {
                return value;
            }
        }
        return defaultValue;
    }

    public static void SetSetting(string settingKey, char value)
    {
        LocalSettings[settingKey] = value;
    }

    public static string GetSetting(string settingKey, string defaultValue)
    {
        if (LocalSettings.TryGetValue(settingKey, out object? obj))
        {
            if (obj is string value)
            {
                return value;
            }
        }
        return defaultValue;
    }

    public static void SetSetting(string settingKey, string value)
    {
        LocalSettings[settingKey] = value;
    }

    public static DateTime GetSetting(string settingKey, DateTime defaultValue)
    {
        if (LocalSettings.TryGetValue(settingKey, out object? obj))
        {
            if (obj is DateTime value)
            {
                return value;
            }
        }
        return defaultValue;
    }

    public static void SetSetting(string settingKey, DateTime value)
    {
        LocalSettings[settingKey] = value;
    }

    public static TimeSpan GetSetting(string settingKey, TimeSpan defaultValue)
    {
        if (LocalSettings.TryGetValue(settingKey, out object? obj))
        {
            if (obj is TimeSpan value)
            {
                return value;
            }
        }
        return defaultValue;
    }

    public static void SetSetting(string settingKey, TimeSpan value)
    {
        LocalSettings[settingKey] = value;
    }

    public static Guid GetSetting(string settingKey, Guid defaultValue)
    {
        if (LocalSettings.TryGetValue(settingKey, out object? obj))
        {
            if (obj is Guid value)
            {
                return value;
            }
        }
        return defaultValue;
    }

    public static void SetSetting(string settingKey, Guid value)
    {
        LocalSettings[settingKey] = value;
    }

}