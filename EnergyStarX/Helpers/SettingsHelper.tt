<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<# string[] primitiveSettingTypes = new[] 
{ 
    "int", "long", "float", "double",
    "bool",
    "char", "string",
    "DateTime", "TimeSpan",
    "Guid",
}; #>
// This file is generated by a T4 template. Do not edit manually.

// Note:
// Some types can be directly stored in "ApplicationData.Current.LocalSettings": 
// https://docs.microsoft.com/windows/apps/design/app-settings/store-and-retrieve-app-data#settings
// Unfortunately there's no way to constraint a generic type "T" to "T1 or T2" in C#, so I have to use a T4 template to generate these methods.

using Windows.Foundation.Collections;
using Windows.Storage;

namespace EnergyStarX.Helpers;

public static class SettingsHelper
{
    private static IPropertySet LocalSettings => ApplicationData.Current.LocalSettings.Values;

<# foreach (string type in primitiveSettingTypes) 
{ #>
    public static <#= type #> GetSetting(string settingKey, <#= type #> defaultValue)
    {
        if (LocalSettings.TryGetValue(settingKey, out object? obj))
        {
            if (obj is <#= type #> value)
            {
                return value;
            }
        }
        return defaultValue;
    }

    public static void SetSetting(string settingKey, <#= type #> value)
    {
        LocalSettings[settingKey] = value;
    }

<# } #>
}